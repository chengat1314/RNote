# -*- mode: org -*-

# Time-stamp: <2011-12-09 15:52:44 Friday by richard>

#+STARTUP: showall

#+TITLE:       TEST org mode and some lisp notes.

* Manage lisp:


** Lisp programs are made up of expressions, which are lists or single atoms.

** Lists are made up of zero or more atoms or inner lists, separated by whitespace and surrounded by parentheses. A list can be empty.

** Atoms are multi-character symbols, like forward-paragraph, single character symbols like +, strings of characters between double quotation marks, or numbers.

** Evaluate:

*** When you evaluate a symbol by itself, its value is returned.
*** When you evaluate a list, the Lisp interpreter looks at the first symbol in the list and then at the function definition bound to that symbol. Then the instructions in the function definition are carried out.
*** `(apostrophe), tells the Lisp interpreter that it should return the following expression as written, and not evaluate it as it would if the quote were not there.

** `(apostrophe) in preceding sections is called a quote; when it precedes a list, it tells Lisp to do nothing with the list, other than take it as it is written.

** But if there is no quote preceding a list, the first item of the list is special: it is a command for the computer to obey

** evaluate such a list: place your cursor immediately after the right hand parenthesis of the following list and then type C-x C-e

** The error message is generated by a built-in GNU Emacs debugger. We will ‘enter the debugger’. You get out of the debugger by typing q.

** Since Emacs Lisp is large, it is customary to name symbols in a way that identifies the part of Emacs to which the function belongs.

** The interpreter works on the innermost list first, to evaluate the result of that list. The result may be used by the enclosing expression.

** A symbol can have both a function definition and a value attached to it at the same time. Or it can have just one or the other. 

** The symbol number-or-marker-p says that the Lisp interpreter is trying to determine whether the information presented it (the value of the argument) is a number or a marker (a special object representing a buffer position). 
*** p for (predict) In the jargon used by the early Lisp researchers, a predicate refers to a function to determine whether some property is true or false.
*** Other Lisp symbols that end in ‘p’ include zerop, a function that tests whether its argument has the value of zero, and listp, a function that tests whether its argument is a list.

** In most uses of message in programs that you write, the text will be printed in the echo area as a side-effect, without the quotes. 

** There are several ways by which a variable can be given a value. One of the ways is to use either the function set or the function setq. Another way is to use let.

*** setq can be used to assign different values to different variables.

** SOLUTION to Exercises:
1. Generate an error message by evaluating an appropriate symbol that is not within parentheses.
   Any atom is a function but not a variable.
   such as (buffer-name); Already mentioned in chapter 1.

2. Generate an error message by evaluating an appropriate symbol that is between parentheses.
   Any atom is a variable but not a function.
   #+begin_lisp options
   (fill-column)
   #+end_lisp

3. Create a counter that increments by two rather than one.
   (setq counter 0)
   (setq counter (+ counter 2))

4. Write an expression that prints a message in the echo area when evaluated.
   #+begin_lisp 
   (message "This message will be showed in echo area.")
   #+end_lisp

* Code in Chapter 1:

  #+begin_lisp 

  '(rose
  violet
  daisy
  buttercup)


  (+ 2 2)

  '(this list has (a list inside of it))

  ()


  '(this list includes "test between quotation marks")

  (this is an unquoted list)

  (fill-column)

  (concat "abc" "def")

  (substring "We Master the Changes" 3 9)

  (concat "The " (number-to-string (+ 2 fill-column)) " red cc.")

  (concat "The " (int-to-string (+ 2 fill-column)) " red cc.")

  (*)

  (+)

  (+ 3)

  (* 3)

  (+ 2 'hello)

  (message "Hello Richard!")

  (message "The value of fill-column is %d." fill-column)

  (message "There are %d %s in the office!" (- fill-column 14) "pink elephants")

  (message "He saw %d %s"
  (- fill-column 34)
  (concat "red "
  (substring
  "The quick brown foxes jumped." 16 21)
  " leaping"))

  (set 'flowers '(rose violet daisy buttercup))

  (setq carnivores '(lion tiger leopad))

  (setq trees '(pine fir oak maple)
  herbivores '(gazelle antelope zebra))

  (setq counter 0)

  (setq counter (+ counter 1))

  (buffer-name)

  #+end_lisp

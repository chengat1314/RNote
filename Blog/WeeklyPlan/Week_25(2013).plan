# -*- mode: org -*-
# Last modified: <2013-07-01 02:11:09 Monday by wongrichard>
#+TODO: TODO(t) UNDERGOING(u) | DONE(d) CANCELED(c) FAILED(f)
#+STARTUP: showall
#+TITLE:   Jun 23 - 30 (Week 25)

* Relationship
** TODO:

* Professional Skill
** 本周日日加班.

* Daily Journal
  本周主要
  commit近200次, 太恐怖了. 基本周末晚上算是完成了. 需要周一部署上去. 好紧张的一个项目.
  1. 跟进了DMP的计划.
     很多方法可能需要我进一步去处理. (data很重要.)
  2. 深入的处理了数据(说实在咱们研究院其实特别需要这一步). 顾问在去噪方案上讨论后有一些变动, 在去噪问题上确认了顾问的需求(我再也不敢说是最终了).
     去噪现在由于需求并不稳定. (顾问有的时候认为是, 而且需要自己人员的讨论, 而且人和人去噪的结果也不一样)
     最终去噪方案采用辅助为主的策略:
     1. 噪音源过滤. (机器过滤可以全范围, 比手工快)
     2. 关键字过滤.
     3. 去重排列. (这样可以整页整页的过滤各类信息, 加快顾问的去噪效率)
     可能需要周一花4个小时左右实现吧.
  3. 重构了nlp_lab库, 改进了去重算法.(多亏去噪, 对weibo去重理解更深了一步)
     几点内容:
     1. haiwen的MySql设计的还是特别考究的.
     2. 只重写了跟后端的通信方法, 避免出现卡顿, 前端没有反映的情况. (额, 我表示ajax在django页面中不暴露信息, 很不好debug.).
     3. 擦了好多屁股, 比如:
        1. 各种自模块的全局变量
        2. 机器配置直接塞在django里面.(而不在settings里面)
        3. settings 不从django.conf import, 直接从settings文件去import.
  4. 去除了nlp_server库的nlp_settings as submodule.
     需要注意的是: 如果@nipeng用了nlp_server的库, 则需要改变相关配置. (这个会另发邮件.)
     1. 分离deduplicate_config 为 deploy_settings 和test_settings. 然后和django一样, 采用软链接的形式引入配置, 避免因为submodule而带来的维护问题.

  5. 工程化的进度.
     1. 基本上咱们的配置和计算算是基本分离了.
        关于软链接的配置方式. 这个其实是没有puppet或者devops的Naive处理方式, 如果迁移使用这些工具会特别的方便. Relax, you guys.

     2. 确认nlp_server和nlp的地位.
        其实最早期是希望nlp主要提供算法/计算相关的东西, *并且* 以包的形式提供, (就不会有@王建 的那种情况.)
        nlp_server则主要提供网络服务(如REST). 然后直接引入nlp的包.
        现在有一些混淆. 而且现在的nlp有点臃肿, 只是.git/就已经200M了. (提交了好多不该提交的东西呗.)

     3. 关于线下测试环境
        访问线上数据库有诸多不便, 科学计算的库往往有经过特别的优化而导致的对mac的支持并不好等原因. 我专门处理了一个基于virtualbox+vagrant的虚拟机. 还算比较好用.
        而且完全隔离了具体的接口.

  6. 僵尸粉接口.
     僵尸粉接口需要更多的改进, 咱们的速度特别慢. 而且对整个业务的好处还是特别明显的. 如果DMP这个事情差不多了, 可能需要和nipeng一起过一下整个spam的算法.
     上周至少3个人希望让我跑僵尸粉的接口. 多线程还可以接受, 单线程卡的1j.
     不过这个东西, 看需求把.
     咱们现在的nlp包特别臃肿. - -

# -*- mode: org -*-
# Last modified: <2012-02-24 18:52:46 Friday by richard>
#+STARTUP: showall
#+TITLE:   C++ Details

* Tips
  1. Direct assigment syntax is more flexible and can be slightly more
     efficient.
     #+begin_src c++ :tangle yes
int ival = 2048; //copy-initialization
int ival(2048);  //direct-initialization
     #+end_src
  2. Every object of built-in type should be initialized.
  3. Use const_cast almost always indicates a design flaw.
  4. When not certain which container the application should use, try
     to write your code so that it uses only operations common to both
     bevctors and lists.
  5. Modern C++ program ordinarily ought to use the allocator class to
     allocate memory. It is more type-safe and more flexible.

* Good habits
  1. Define an object near the point at which the object is first
     used, and then initialize it.
  2. It is always best to defer optimization until the program is
     known to work and when rnu-time measurements indicate that
     improving memory allocation will solve known performance problems.
  3. Often all members of a local class should public.
  4. Performing a dynamic_cast in a condition ensures that the cast
     and test of its result are done in a sigle expression.
  5. Good habit, Using class for resources ensures the resource freed
     if an exception occurs.
  6. Where using directives are useful is in the implementation for the namespace itself.
  7. Arguments should not need casts when calling oer-loaded
     functions: the need for a cast means that the parameter sets are
     designed poorly.
  8. It is usually a good idea to define array parameters as opinters,
     rather than using the array syntax.
  9. Using != in preference to < as a matter of habit.
  10. in multi-comment style, Begin each line in the comment with
      asterisk, thus indicating that the entire range is part of a
      multi-line comment.
  11. Headers for declarations, not definitions.(will be included
      multiple times)
      But *except*:
      1. classes;
      2. const objects whose value is known at compile time;
      3. inline functions.
      4. When a const is initialized by a value that is not a constant
         expression, then it shouldn'tbe defined in header file.
  12. We should always use the fully qualified library names: inside
      header files.
  13. Any variable used to store the result from string size operation
      ought to be of type class::size_type, It is particularly
      important not to assign the return from size to an int.
  14. It was almost right to use double.
  15. Programs that use undefined behavior are in error.
      Programs also shouldn't rely on machine-dependent behavior.
  16. Identifiers shouldn't
      - contain two consecutive underscores
      - begin with an underscore followed immediately by an upper-case
        letter.
      - begin with an underscore, when defined outside a function.
      - Using Operator alternative names.(table:)
      | C++ Operator Alternative names       |
      |--------------------------------------|
      | and     bitand  compl  not_eq  or_eq |
      | xor_eq  and_eq  bitor  not     or    |
      | xor                                  |
      |--------------------------------------|
  17. A null statement should be commented, so that anyone reading the
      code can see that the statement was omitted intentionally.
  18. Use EXIT_FAILURE and EXIT_SUCCESS in the cstdlib header to make
      return values machine-independent.
  19. It is usually a bad idea to declare a function locally. Function
      declarations should go in header files.
  20. When dealing with the algorithms, it is best to think of the
      iterators on associative containers as if they were input
      iterators that also support decrement, not as full bidirectional
      iterators.
  21. It's a good idea to write constructor initilizers in the same
      order as the members are declared. Moreover, when possible,
      avoid using members to initilize other members.
  22. If a class contains datamember of built-in or compound type,
      then the class should not rely on the synthesized default
      constructor.
  23. It is almost always right to provide a default constructor if
      other constructors are being defined.
  24. Makeing constructor =explicit= may avoid mistakes, and a user
      can explicitly construct an object when a conversion is useful.
  25. It is a good idea to group friend declarations together either
      at the beginning or end of the class definition.
  26. It is a good idea to write constructor initializers in the same order as the members are declared. Moreover, when possible, avoid using members to initialize other members.
  27. We prefer to use a default argument because it reduces code duplication.
  28. If a class contains data members of built-in or compound type, then it should define it's own constructor to initialize these members.
  29. Making constructors explicit may avoid mistakes, and a user can explicitly construct an object when a conversion is useful.
  30. DONOT overload the comma, address-of, logical AND, or logical OR operators.
  31. When the meaning of an overloaded operator is not obvious, it is better NOTTO give the operation a name. It is also usually better to use a named function rather than an operator for operations that are rarely done.
  32. Generally, output operators shuold print the contents of the object with minimal formatting. They should not print a newline.
  33. When designing an input operator, it is important to decide what to do about error-recovery, if anything.
  34. Two important principles for writing generic code:
      - The parameters to the template are const references.
      - The tests in the body use only < comparisons.

        
* Details (Something we may overlooked)

** C++ Library

*** Library Overview:
    1. The library is not required to check the value of the index.
    2. Using difference_type to store :iter1 - iter2.
    3. size_t type is defined in the cstddef header.
    4. the IO type can be used in a condition, but the vector and
       string types may not be used as a condition.
    5. Don't cache the iterator from the end.
       #+begin_src c++ :tangle yes
    std::vector<int>::iterator first = vint.begin(),
                                last = vint.end();// cache the end.
       #+end_src
    6. using at(n) method in vector and deque when need check to check
       out-of-range error.

**** pair type
     defined in utility header.
     operations p1 < p2: is 
     #+begin_src c++ :tangle yes
(p1.first < p2.first) || (p1.second < p2.second)
     #+end_src

**** Iterators
    1. Invalidate the iterators' operations.(Be aware!)
       - insert
         (Exception: insert front and back in deque)
       - push_back
       - push_front
       - resize
       - assign
       - erase(but erase will return the iterator after the one
         deleted)
       - etc.
    2. Operation on iterator but not invalidate.
       - Swap(iterators will refer to diff. object)

**** Which container to use.
     1. FIXME:



*** Boost:

*** priority_queue
    A priority_queue requires random access and so can be built on a
    vector or a deque but not on a list.

*** vector: 
    1. It is always to let the vector grow by adding elements to it
       dynamically as the element values are known.
    2. If vector is empty, then the iterator returned from begin does
       not denote any element.

*** map 
    The key type needs to support *only* the < operator. 

*** multimap
    The version of erase that take a key removes all elements with
    that key.

*** Arrays:
    1. The right type to use for the index is size_t.

*** bitset:
    1. The bits are read from the string from right to left.
       - The numbering conventions of strings and bitsets are
         inversely related. 

*** String Library:
    1. Caller is respondible for size of a destination string.
    2. Using strn- series functions.
    3. Different between c_str() and data():
       - Use c_str() if you want a null terminated string.
       - Use data() if you don't need the string to be null
         terminated. It may turn out to perform better than c_str().
         (Especially when deal with arbitrary binary data use string.)

         

    4. function table:
       | <25>                      |           |
       | common functions          | head file |
       |---------------------------+-----------|
       | strlen(s)                 | <cstring> |
       | strcmp(s1, s2)            | $4        |
       | strcat(s1, s2)            | $4        |
       | strcpy(s1, s2)            | $4        |
       | strncat(s1, s2, n)        | $4        |
       | strncpy(s1, s2, n)        | $4        |
       |---------------------------+-----------|

*** IO library
    - Hitting the end-of-file also sets the failbit.
    - If we reuse a file stream to read or write more than one file,
      we must clear the stream before using it to read from another
      file.
    - Mode is an Attribute of FILE, not a stream.
    - File mode combination:
      | combinations | affect                                                             |
      |--------------+--------------------------------------------------------------------|
      | out          | open for output; deletes existing data in the file                 |
      | out app      | open for output; all writes at the end of file                     |
      | out trunc    | same as out                                                        |
      | in           | open for input                                                     |
      | in out       | open for both input and output                                     |
      | in out trunc | open for both input and output, deletes existing data in the file. |
      |--------------+--------------------------------------------------------------------|
    - condition state:
      | Name             | Meaning                                                    |
      |------------------+------------------------------------------------------------|
      | strm::iostate    | Name of machine-dependent integral type                    |
      | strm::badbit     | strm::iostate indicate that a stream is corrupted          |
      | strm::failbit    | strm::iostate indicate that IO operation failed            |
      | strm::odfbit     | strm::iostate indicate the a stream hit end-of-file        |
      | s.eof()          | true if eofbit in the stream s is set                      |
      | s.fail()         | true if failbit                                            |
      | s.bad()          | true if badbit  in the stream s is set                     |
      | s.good()         | true if stream s is in a valid state.                      |
      | s.clear()        | Reset all condition values in the stream s to valid state. |
      | s.clear(flag)    | Set specified condition(flag) state in s to valid.         |
      | s.setstate(flag) | Add specified condition(flag) to s.                        |
      | s.rdstate()      | Returns current condition of s as an strm::iostate value.  |
      |------------------+------------------------------------------------------------|
    - When testing IO you can use:
      #+begin_src c++ :tangle yes
      is.setstate(ifstream::badbit|ifstream::failbit)
      #+end_src

** new and delete
   - delete [] pi;
     If the empty bracket pair is omitted, it is an error, but an
     error that the compiler is unlikey to catch; the program may fail
     at run time.
   - If the new expression cannot acquire the requested memory, it
     throws an exception named bad_alloc.
   - We should both or neither define member new and delete.
     We can still using global new and delete using a global operator.
     #+begin_src c++ :tangle yes
void *operator new(std::size_t);
void operator delete(void *, std::size_t);
     #+end_src
   - placement new expression.
     #+begin_src c++ :tangle yes
new (place_address) type
new (place_address) type (initializer-list)
     #+end_src

** Compile details
   - name lookup happens before typechecking.
   - Template instantiation will be detected at link-time.

** Debug details
*** four constants useful in debugging:
    | name     | meaning                     |
    |----------+-----------------------------|
    | __FILE__ | name of the file.           |
    | __LINE__ | current line number.        |
    | __TIME__ | time the file was compiled. |
    | __DATE__ | date the file was compiled. |
    |----------+-----------------------------|
    
*** The assert macro 
    assert macro is defined in the assert header, which we must
    include in any file that uses assert.
    #+begin_src c++ :tangle yes
assert(word.size() > threshold);
    #+end_src

*** NDEBUG
    We can write conditional debugging code using the NDEBUG preprocessor.


** bitwise operators
*** left-shift and right-shift operand.
    - The right-hand operand must not be negative and must be a value
      that is strictly less than the number of bits in the left-hand
      operand. Otherwise, the effect of the operation is undefined.
    - Bit code snippets:
      #+begin_src c++ :tangle yes
    bitv |= 1UL << 27;//set bit 27
    bitv &= ~(1UL << 27); //turn off bit 27;
      #+end_src

** Exception Handling mechanism
*** try
    - Once the catch clause finishes, executoin continues with the
      statement immediately following the last catch clause of the try
      block.
*** throw
    - A throw expression is usually followed by a semicolon, makeing
      it into an expression statement.

*** Standard Exceptions.
    - Defined in 4 headers:
      1. The exception header defines the most general kind of
         exception class named exception.
      2. The stdexcept header defines several general purpose
         exception classes.
         standard exception class in <stdexcept>
         |------------------+--------------------------------------------------------------------------------------|
         | type             | details                                                                              |
         |------------------+--------------------------------------------------------------------------------------|
         | exception        | The most general kind of problem                                                     |
         | runtime_error    | problem only can be detected at runtime                                              |
         | range_error      | outside the range of valuesthat are meaningful                                       |
         | overflow_error   | computation that overflowed                                                          |
         | underflow_error  | computation that underflowed                                                         |
         | logic_error      | problem can be detected before runtime                                               |
         | domain_error     | <logic_error>:argument for which no result exists                                    |
         | invalid_argument | <logic_error>:inappropriate argument                                                 |
         | length_error     | <logic_error>:attempt to create an object larger than the maximum size for that type |
         | out_of_range     | <logic_error>:used a value outside the valid range.                                  |
         |------------------+--------------------------------------------------------------------------------------|
      3. The new header defines the bad_alloc exception type.
      4. The type_info header defines the bad_cast exception type.
    - The exception, bad alloc, and bad_case type define only a
      default constructor.

** Enumerator
   1. An enumerator value need not be unique.
   2. The type to which an enum object enumerator is promoted is
      machine-defined and depends on the value of the largest
      enumerator.(at least to int)

** Reference and Pointers
*** Reference:
    - A non-const reference may be attached only to an object of the
      same type as the reference itself.
    - A const reference may be bound to an object of a different but
      related type or to an rvalue.

*** Pointers:
    - the type void* is a special pointer type that can hold an
      address of any object.
    - Using ptrdiff_t to store the result of two pointers.
      ptrdiff_t type is a machine-specific type and is defined in the
      cstddef header.
    - pointers and typedef:
      #+begin_src c++ :tangle yes
int (*ip)[4]             // style 1

typedef int int_array[4] // style 2
int array *ip;
      #+end_src


** Scope:
*** Statement scope:
    - Variables defined in a condition must be initialized.
*** File scope:
    - Nonconst variables are extern by default. To make a const
      variable accessible to other files, we must explicitly specify
      that it is extern.
    - const variables declared at global scope are local to the file in which the object is defined.
** Lvalue and Rvalue:
   - lvalue may appear as either the left-hand or right-hand side of
     an assignment.(an lvalue yields an object)
   - Rvalue may apear on the right but not left-hand side of an
     assignment.
   - The address-of operator may be applied only to an lvalue.
   - Prefix increment yields an lvalue.
     Postfix increment yields an rvalue.

** A definition is also a declaration.
   If an initializer is present, the declaration is treated as a
   definition even if the declaration is labeled extern.


** switch and case
  1. It can be useful always to define a default label even if there
     is no processing to be done in the default case.
  2. case labels must be constant integral expressions.
     Expression will be determined at compile time.
  3. Variables can be defined following only the last case or default
     label.
     - One smart way to surround this point is using bracket.


** Type and operators
*** sizeof
    - The sizeof operator returns a value of type size_t.
    - sizeof(ia)/sizeof(*ia) returns the number of element in ia.
    - sizeof char or an expression of type char is guaranteed to
      be 1.

*** The integers, int, short, and long, are all signed by default.
    - The char type is respresented using either the signed char or
      unsigned char version.(compiler-dependent)

*** Ellipsis paramter
    - Ellipsis parameters are in C++ in order to compile C programs
      that use varargs.
    - Only simple data types from the C++ program should be passed to
      functions with ellipses parameters.

*** Every literal has an associated type and exists only for the built-in type.
    - There are no literals of type short.
    - By default, floating-point literals are type double.
    - The type of a wide string literal is an array of constant wide
      character. Also terminated by wide null character.
    - The result is undefined when concatenate a string literal and a
      wide string literal.
    #+begin_src c++ :tangle yes
     std::cout << "string here" L"wide string here" << std::endl;
     std::cout << "string here again" << std::endl;
     std::cout << L"wide string here again" << std::endl;
    #+end_src
    - Example table:
    | type                       | Example                 |
    |----------------------------+-------------------------|
    | unsigned                   | 123u                    |
    | unsigned long              | 1024UL, 8LU             |
    | long                       | 1L                      |
    | double                     | 0., 0e0                 |
    | float                      | 3.14F, 3.1415E0f, .001f |
    | bool                       | true, false             |
    | char                       | 'a'                     |
    | char*(String literal)      | "string"                |
    | wchar_t                    | L'a'                    |
    | wchar_t*(w-string literal) | L"wide string"          |

*** Using wide-character literal of type wchar_t by 

*** Escape sequence form:
    - \ooo(three octal digits.)
      - \7 (bell) \12 (newline) \40 (blank)
      - \0 (null) \062 (`2`)    \115 (`M`)
    - \xddd(hexadecimal escape sequence.)

*** return
    - failing to provide a return after a loop that does contain a
      return is particularly insidious because many compilers will not
      detect it. The behavior at run time is undefined.
** An istream becomes invalid when we hit end-of-file or encounter an invalid input.

** Name are resolved where thay appear within the file.

** Buffers:

*** Output buffers are not flushed if the program terminates abnormally.

*** Output buffers usually must be explicitly flushed to force the buffer to be written.

*** cin and cout are binded default;that is cin.tie(&cout)
    reading cin flushes cout; cout is also flushed when the program ends normally.

*** By default, writes to cerr are not buffered and clog are buffered.


** Class

   1. To prevent copies, a class must explicitly declare its copy
      constructor as private.
   2. It is crucially important for assignment operators to consider
      when an object is assigned to itself.
   3. Operators that cannot be overloaded.
      | <7>     | <7>     | <7>     | <7>     |
      | ::      | .*      | .       | ?:      |
   4. Input operators must deal with the possibility of errors and
      end-of-file.
   5. The relational operators, like the equality operators, shuold be
      defined as nonmember functions.
   6. If a virtual is called from inside a constructor or destructor,
      then the version that is run is the one defined for the type of
      the constructor or destructor itself.
   7. Virtual base classes are always contructed prior to nonvirtual
      base classes regardless where they appear in the inheritance
      hierarchy.

*** Static 
  1. =static= function have no this pointer.
  2. =static= member functions may not be declared as const.
  3. =static= data members must be defined exactly once outside the
     class body.
  4. =static= keywords used only on the declaration inside the class.
  5. When a =const static= datamember is initialized in the class
     body, the data member must still be defind outside the class
     definition.
     #+begin_src c++ :tangle yes
const int Account::period; // static members
     #+end_src



*** Conversions and operators.
    No conversion is best.
   1. Only one Class-Type conversion may be applied.(more than one is an error)
   2. Needing to use a constructor or a cast to convert an argument in a call to an overloaded function is a sign of bad design.
   3. Never define mutually converting classes.
   4. Avoid conversions to the built-in arithmetic types.
      - Do not define overloaded versions of the operators that take arithmetic types.
      - Do not define a conversion to more than one arithmetic type.

*** Function Adaptor
    The function adapters are divided into the following two categories.
     - Binders:
       A *binder* is a function adaptor that converts a binary function object into a unary function object by binding one of the operands to a given name.
     - Negators:
       A *negator* is a function adaptor that reverses the truth value of a predicate function object.
*** Rule of Three
    We need none or all of these three copy-control members.
    Assignment-operator, copy-constructor, default-constructor

*** Operator overload
    1. Assignment and compound-assignment operators ought to returns a reference to its left-hand operand.
    2. Making class assignment operator virual is likely to be confusing and unlikely to be useful.
    3. We should define neither or both prefix and postfix Increment/Decrement operator.
    4. Prefix Increment/Decrement should return a reference to the incremented or decremented object.
       operator++()
    5. Postfix Increment/Decrement should return the old value. and that is not a reference.
       operator++(int)
    6. To be consistent with the built-in operator, addition returns an rvalue, not a reference.
    7. Classes that define both an arithmetic operator and the related compound assignemtn ordinarily ought to inpliment the arithmetic operator by using the compound assigment.
    8. The equality and inequality operators shouldalmost always be defined in teerms of each other. (We should define both or neither)
    9. The subscript operator must be defined as a class member function.
    10. A class that defines subscript needs to define two versions: one that is a non- =const= member and returns a reference and one that is a =const= member and returns a =const= reference.
    11. Operator arrow must be defined as a class member function. 
    12. The dereference operator is not required to be a member ,but it is usually right to make it a member as well.
    13. A conversion function must be a member function. The function may not specify a return type, and the parameter list must be empty.
        Conversion operators usually should be defined as const members. *(Conversion operations ordinarily should not change the object they are converting)*


    
** Template

1. Using typename to force size_type a type.
   When use types inside a function template.
   #+begin_src c++ :tangle yes
template<typename Class>
Class fcn(Class *a)
{
Class::size_type * p;
}
typename Class::size_type * p;
   #+end_src
   We tell the compiler to treat a member as a type by prefixing uses
   of the member name with the keyword =typename=.
   There is no harm to specify a typename.
2. We can use a function template to initialize or assign to a
   function pointer.
   #+begin_src c++ :tangle yes
template<typename T>
int compare(const T&, const T&);
int (*pf1)(const int&, const int&) = compare;
   #+end_src
3. Instantiation
   - A class template is instantiated when we refer to an actual
     template class type;
   - A function template is instantiated when we call it or use it to
     initialize or assign to a pointer to function.
   - Each instantiation of a class constitues an independent class.
   - ONLY allowed conversion in C++
     * const conversions
     * Array or functoin to pointer conversions.
       WARN: When the parameter is a reference, the arrays are not
       converted to pointers.
4. In the separate compilation model, the compiler keeps track of the
   associated template definitions for us. But if they don't, we
   should using *export keyword* to do so.
5. If a function in a class is never used, then that member function
   is never instantiated.
6. When we want to restrict friendship to a specific instantiation,
   then the class or function must have been declared before it can be
   used in a friend declaration.
7. Opeartor << .
#+begin_src c++ :tangle yes
template <class T>
std::ostream& operator<<(std::ostream&, const Queue<T>&);
template <class Type> class QueueItem {
friend class Queue<Type>;
// needs access to item and next
friend std::ostream&
operator<< <Type> (std::ostream&, const Queue<Type>&);
// ...
};
template <class Type> class Queue {
// needs access to head
friend std::ostream&
operator<< <Type> (std::ostream&, const Queue<Type>&);
};
#+end_src
8. Member templates may not be virtual.
9. Specializing a Function template 
   using empty braket as =template<>=.
10. It was always better to define a function-template specialization
    than to use a nontemplate version.

** Exception
1. The exception object is created by copying the result of the thrown
   expression; that reslut must be of a type that can be copied.
2. When an exception is thrown, the static, compile-time type of the
   thrown object determines the type of the exception object.
3. It is usually a bad idea to throw a pointer.
4. The compiler guarantees that the local objects are properly
   destroyed, also destructor for this object is called
   automatically(Even if the object is partilly constructed). 
5. Destructors Should never throw exceptions.
6. Usually, a catch clause that handles an exception of a type related
   by inheritance ought to define its parameter as a reference.
7. An empty throw can *ONLY* appear in a catch or in a function called
   from a catch.
8. The only way for a constructor to handle an exception from a
   constructor initializer is to write the constructor as a function
   try block.
9. If a function throws an exception not listed in its specification,
   the library function =unexpected= is invoked.
10. We must define our own destructor to reinstate the promise that
    the destructor will not throw.(all std destructor will not throw.)
11. The specification of the source pointe rmust be at least as
    restrictive as the specification of the destination pointer.
    #+begin_src c++ :tangle yes
void recoup(int) throw(runtime_error);
void (*pf1)(int) throw(runtime_error) = recoup;              //OK
void (*pf2)(int) throw(runtime_error, logic_error) = recoup; //OK
void (*pf2)(int) throw() = recoup;                           // Error here
    #+end_src
12.  Copy control in multiple-inheritance.
     if a class with multiple bases defines its own destructor, that
     destructor is responsible only for cleaning up the derived
     class. If the derived class defines its own copy constructor or
     assignment operator, then the class is responsible for copying
     (assigning) all the base class subparts. The base parts are
     automatically copied or assigned only if the derived class uses
     the synthesized versions of these members.

*** Standard Exception Hierarchy
    [file://exception.png]
** auto_ptr
1. Assignments deletes the object pointer to by the left operand.
2. get should be used only to interrogate an =auto_ptr= or to use the
   returned pointer value. get shold not be used as an argument to
   create another auto_ptr.
3. Do not use an auto_ptr to hold a pointer to a statically allocated object.
4. Never use two auto_ptr to refer to the same object.
5. Don't bind to dynamically alocated array.
6. Don't store in a container.

** Unnamed namespace
   Prefer to use unnamed namespace. 
   The definition of an unnamed namespace is local to a particular file
   and never spans multiple text files. 
   *WARNING:*
   1. If a header defines an unnamed namespace then the names in that
      namespace will define different local entities in each file that
      includes the header.
   2. To provide our own specializations of templates defined in a
      namespace, we must ensure that eh specialization definition is
      defined as being in the namespace containing the original
      template definition.

** Bit-field
7. Ordinarily it is best to make a bit-field an unsigned type. The
   behavior of bit-fields stored in a signed type is implementation-defined.
   #+begin_src c++ :tangle yes
typedef unsigned int Bit;
class File
{
    Bit mode: 2;
    Bit modified: 1;
    Bit prot_owner: 3;
    Bit prot_group: 3;
    Bit prot_world: 3;
    // ...
};
   #+end_src
   usage:
   #+begin_src c++ :tangle yes
void File::write()
{
    modified = 1;
}
void File::close()
{
    if(modified){
        //...
    }
}
   #+end_src

* Methods

** The use a class we need to know three things:
   1. What is its name?
   2. Where is it defined?
   3. What operations does it support?



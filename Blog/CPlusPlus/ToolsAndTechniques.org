# -*- mode: org -*-
# Last modified: <2012-02-23 22:42:45 Thursday by richard>
#+STARTUP: showall
#+TITLE:   Tools And Techniques

1. It is always best to defer optimization until the program is known
   to work and when rnu-time measurements indicate that improving
   memory allocation will solve known performance problems.
2. Modern C++ program ordinarily ought to use the allocator class to
   allocate memory. It is more type-safe and more flexible.
3. We should both or neither define member new and delete.
   We can still using global new and delete using a global operator.
   #+begin_src c++ :tangle yes
void *operator new(std::size_t);
void operator delete(void *, std::size_t);
   #+end_src
4. placement new expression.
   #+begin_src c++ :tangle yes
new (place_address) type
new (place_address) type (initializer-list)
   #+end_src
5. Performing a dynamic_cast in a condition ensures that the cast and
   test of its result are done in a sigle expression.
6. Often all members of a local class are public.
7. Ordinarily it is best to make a bit-field an unsigned type. The
   behavior of bit-fields stored in a signed type is implementation-defined.
   #+begin_src c++ :tangle yes
typedef unsigned int Bit;
class File
{
    Bit mode: 2;
    Bit modified: 1;
    Bit prot_owner: 3;
    Bit prot_group: 3;
    Bit prot_world: 3;
    // ...
};
   #+end_src
   usage
   #+begin_src c++ :tangle yes
void File::write()
{
    modified = 1;
}
void File::close()
{
    if(modified){
        //...
    }
}
   #+end_src

all excersices in Chapter 18
Except 18.13,14,16.
Some errors in 18.28, 29.

# -*- mode: org -*-
# Last modified: <2013-04-30 21:21:38 Tuesday by richard>
#+STARTUP: showall
#+LaTeX_CLASS: chinese-export
#+TODO: TODO(t) UNDERGOING(u) | DONE(d) CANCELED(c)
#+TITLE:   essential_clojure
#+AUTHOR: Richard Wong

* Basic Types

** Scalar literals.
   scalar literals are reader syntax for noncollection values.

*** String
#+begin_src clojure
   "single line string"
   "multi-line string is
also very easy here. "
#+end_src

*** Boolean
#+begin_src clojure
true
false
#+end_src

*** nil
#+begin_src clojure
    nil
#+end_src
    is null in java, nil in ruby, None in Python.

*** Character
    #+begin_src clojure
    \e
    #+end_src
    denoted by a backslash.

**** Warning addtional in character:
     #+begin_src clojure
(str \space\newline\formfeed\return\backspace\tab)
     #+end_src

*** Keywords
    evaluate to themselves.
    used as accessors for the values they name in clojure collections
    and types.
    #+begin_src clojure
:keyword1
    #+end_src

    a keyword with =::= is expanded by the reader to a namespaced
    keyword in the current namespace.

**** /
     =/= denotes a namespaced keyword.

**** functions bounded
     #+begin_src clojure
(name :user/location)
(namespace :user/location)
(namespace :location)
(namespace ::location)
     #+end_src

*** Symbols
    Symbols are identifiers.
#+begin_src clojure
(average [60 102 330 880])
#+end_src

*** numeric
    pure-clojure operations will default to using the wider numeric
    representations.
    | literal syntax       | Numeric type         |
    |----------------------+----------------------|
    | 42, 0xff, 2r111, 040 | long                 |
    | 3.14, 6.022123213    | double               |
    | 42N                  | clojure.lang.BigInt  |
    | 0.01M                | java.math.BigDecimal |
    | 22/7                 | clojure.lang.Ratio   |
    |----------------------+----------------------|

    * Hexadecimal notation
      0xff
    * Octal notation
      040
    * Flexible numeral bases.
      3r212 is 23
      This is supported up to base 36. limit by
      java.math.BigInteger's radix support.

*** Regular expressions
    #+begin_src clojure
(class #"(p|h)ail")
;= java.util.regex.Pattern
    #+end_src
#+begin_src clojure
(re-seq #"(...) (...)" "Foo bar")
#+end_src

**** function bounded.
     1. #"pattern"
     2. re-find
     3. re-seq
     4. re-matches
     5. re-pattern
     6. re-matcher
     7. re-groups (clojure.string/)
     8. replace
     9. replace-first

** comments
   #+begin_src clojure
; singleline.
(read-string "(+ 1 2 #_(* 2 2) 8)"); #_ in reader macro.
(comment ) ; comment macro for multiline. but will return nil.
   #+end_src

** Whitespace and commas
   commas are considered whitespace by the reader.

** Collection literals.
   #+begin_src clojure
'(a b :name 12.5)         ;; list
['a 'b :name 12.5]          ;; vector
{:name "Chas" :age 31} ;; map
#{1 2 3} ;; set
   #+end_src

*** property
    - Vector are functoins of their indices.
    - The nth functoin allows you pluck any value from a sequential
      collection using an index into that collection.
    - All of Clojure's sequential collections implement the
      java.util.List interface, so you can use that interface's .get
      method to access their contents.

*** related functions

* utilities.
** namespace
   #+begin_src clojure
*ns*
   #+end_src
   =*ns*= always bound to current namespace.
   1. java.lang package are imported by default into each Clojure
      namespace.
   2. namespace by default alias all of the vars defined in the
      clojure.core.

** Symbol Evaluation.
   #+begin_src clojure
(defn average
   [numbers]
(/ (apply + numbers) (count numbers)))
   #+end_src

** Special forms
*** quote
    Suppressing evaluation.
    (quote x)
    prefixing any form with a quote character(') will expand into a
    usage of quote.
    #+begin_src clojure
''x
;= (quote x)
    #+end_src

*** do
    Code Blocks.
    #+begin_src clojure
(do
  (println "hi")
  (apply * [4 5 6]))
    #+end_src

**** expand forms
     1. fn
     2. let
     3. loop
     4. try

*** def
    defining vars.

**** expand forms
     1. defn
     2. defn-
     3. defprotocol
     4. defonce
     5. defmacro
     6. deftype
     7. defrecord
     8. defmethod
*** let
    Local Binding
**** Property
     - All locals are immutable.
     - let's binding vector is interpreted at compile time to provide
       optional destructuring of common collection types.

**** Sequential destructuring
     same with python's unpacking.
     works with any sequential collection, including:
     1. Clojure lists, vectors, and seqs
     2. Any collection that implements java.util.List
     3. Java arrays
     4. Strings
     5. seq has an even number of values can be destrucured as a map
        of key value pairs.

**** keywords in destructuring
     - :as to retaining the destructured value.
     - :or to take default value.
     - :keys, :strs, :syms to mapped out value according types.
       :keys using more than other two keywords.

**** Map destructuring
     map including:
     - Clojure hash-maps, array-maps, and records.
     - Any collection that implements java.util.Map.
     - Any value that is supported by the get function can be
       map-destructured, using indices as keys.

*** fn
#+begin_src clojure
(def strange-adder (fn adder-self-reference
                     ([x] (adder-self-reference x 1))
                     ([x y] (+ x y))))
#+end_src

*** letfn
#+begin_src clojure
(letfn [(odd? [n]
          (even? (dec n)))
        (even? [n]
          (or (zero? n)
            (odd? (dec n))))]
(odd? 11))
#+end_src

** Function literals
#+begin_src clojure
#(+ % %1);% is same with %1
#(+ % %&);%& is variadic parameter
#+end_src
   literals cannot be nested.

** =if=
   logical truth to be anything other than =nil= or =false=.

*** On =if=
    - =when=
    - =cond=
    - =if-let=
    - =when-let=

** =recur= with =loop=

*** on recur
    - =dotimes=
    - =doseq=

**** prefer to use
     - =doseq=, =dotimes= when they can do the job.
     - =map=, =reduce=, =for= when iterating over a collection or
       sequence.

** var
#+begin_src clojure
(def x 5)
#+end_src
   - reference var:
     =(var x)= or =#'x=

** =new=
   |----------------------------+---------------------------------+---------------------------------|
   | operation                  | sugared interop form(preferred) | equivalent special form usage   |
   |----------------------------+---------------------------------+---------------------------------|
   | Object instantiation       | =(java.util.ArrayList. 100)=    | =(new java.util.ArrayList 100)= |
   | Static method invocatoin   | =(Math/pow 2 10)=               | =(. Math pow 2 10)=             |
   | Instance method invocation | =(.substring "hello" 1 3)=      | =(. "hello" substring 1 2)=     |
   | Static field access        | =Integer/MAX_VALUE=             | =(. Integer MAX_VALUE)=         |
   | Instance field access      | =(.someField some-object)=      | =(. some-ojbect some-field)=    |
   |----------------------------+---------------------------------+---------------------------------|

** set!
   used to:
   - set the thread-local value of vars that have a non-root binding.
   - set the value of a Java field demonstrated in "Accessing object fields".
   - set the value of mutable fields define by =deftype=;

** =eval=
   #+begin_src clojure

   (eval :foo)
   (eval '[1 2 3])
   #+end_src

*** Warnings
    eval semantics underly all of clojure, it is itself very rarely
    used within Clojure programs.
    It is likely that you're working with far more rope than you
    need, and might end up hanging yourself in the process.

* Jargons
** variadic
   functions gather all additional arguments used in calls to it into
   a seq called variadic.
** Homoiconicity

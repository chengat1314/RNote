# -*- mode: org -*-
# Last modified: <2012-01-18 20:52:06 Wednesday by richard>
#+STARTUP: showall

#+TITLE:   Makefile Note

首先特别感谢陈皓。他是这本小phalet得作者。
* 在 Makefile 中的命令,必须要以[Tab]键开始。
  Makefile里面只有行注释，并且以#开头。
* 选自跟我一起写Makefile
  在 Makefile 中我们要定义一系列的变量,变量一般都是字符串,这个有点你 C 语言中的宏,当 Makefile 被执行时,其中的变量都会被扩展到相应的引用位置上。
** 可以使用make -f参数指定具体得make文件。

** 可以实用
   include来引用具体得make文件。
   include foo.make *.mk $(bar)
*** include查找方式：
    如果文件都没有指定绝对路径或是相对路径的话,
    make 会在当前目录下首先寻找,如果当前目录下没有找到,那么,make 还会在下面的几个
    目录下找:
    1、如果 make 执行时,有“-I”或“--include-dir”参数,那么 make 就会在这个参数
    所指定的目录下去寻找。
    2、如果目录<prefix>/include(一般是:/usr/local/bin 或/usr/include)存在的话,
    make 也会去找。如果有文件没有找到的话,make 会生成一条警告信息,但不会马上出现致
    命错误。它会继续载入其它的文件,一旦完成 makefile 的读取,make 会再重试这些没有找
    到,或是不能读取的文件,如果还是不行,make 才会出现一条致命信息。如果你想让 make
    不理那些无法读取的文件,而继续执行,你可以在 include 前加一个减号“-”。
*** 环境变量 MAKEFILES
    如果你的当前环境中定义了环境变量 MAKEFILES 那么,make 会把这个变量
    中的值做一个类似于 include 的动作。这个变量中的值是其它的
    Makefile,用空格分隔。只是,它和 include不同的是,从这个环境变中引入
    的 Makefile 的“目标”不会起作用,如果环境变量中定义的文件发现错误,make
    也会不理。

*** Makefile 文件中的特殊变量“VPATH”
    make就会在当当前目录找不到的情况下,到所指定的目录中去找寻文件了。
    VPATH = src:../headers
    

**** vpath”关键字：
     它的使
     用方法有三种:
     1、vpath <pattern> <directories>
     为符合模式<pattern>的文件指定搜索目录<directories>。
     2、vpath <pattern>
     清除符合模式<pattern>的文件的搜索目录。
     3、vpath
     清除所有已被设置好了的文件搜索目录。
     如果连续的 vpath 语句中出现
     了相同的<pattern>,或是被重复了的<pattern>,那么,make 会按照 vpath 语句的先后顺
     序来执行搜索。


*** make 支持三个通配符:
    “*”,“?”和“[...]”
    

**** 在定义变量时候使用通配符得方法：objects := $(wildcard *.o)

*** 一般来说,定义在 Makefile 中的目标可能会有很多,但是第一条规则中的目标将被确立为最终的目标。如果第一条规则中的目标有很多个,那么,第一个目标会成为最终的目标

* GNU 的 make 工作时的执行步骤:
  1、读入所有的 Makefile。
  2、读入被 include 的其它 Makefile。
  3、初始化文件中的变量。
  4、推导隐晦规则,并分析所有规则。
  5、为所有的目标文件创建依赖关系链。
  6、根据依赖关系,决定哪些目标要重新生成。
  7、执行生成命令。


** 文件指示。
   其包括了三个部分,一个是在一个 Makefile 中引用另一个 Makefile, 就像
   C 语言中的include一样;另一个是指根据某些情况指定 Makefile 中的有效
   部分,就像 C 语言中的预编译#if 一样;还有就是定义一个多行的命令。

* Make
  make 可以自动推导文件以及文件以来关系后面的命令。

* 宏与变量
  利用Object=来定义，使用$(Object)来使用。 
* 不成文的规矩是——“clean 从来都是放在文件的最后”。（因为在开头都会被禁止掉）
  .PHONY 意思表示 clean 是一个“伪目标”（在此还不知到这个是关键字还是.都可以。）









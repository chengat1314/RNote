# -*- mode: org -*-
# Last modified: <2013-01-07 16:05:15 Monday by richard>
#+STARTUP: showall
#+LaTeX_CLASS: chinese-export
#+TODO: TODO(t) UNDERGOING(u) | DONE(d) CANCELED(c)
#+TITLE:   The Developers Code
#+AUTHOR: Richard Wong

围绕几个问题，总结这本书。

* 最重要的事情，吸取第一手教训。
  即使是架构师也应该找时间写代码。
  我们感到耻辱是因为此时和最有激情时候的状态有着巨大的落差。

* 更好的编程习惯
  - 不把代码囤积在注释里，直接删除旧代码。用代码管理工具去记录。
  - 多元化胜过专业化。软件设计的目标是一致的。
  - 写代码是不得已而为之 :: 如果面对每个任务都直接进入写代码模式的话，
       我们就失去了一个认真思考为什么要写他的机会。
  - 拿来主义 :: 开源项目太多，花点心思就可以把他们缝起来。但是我们可能
                很快就会丧失对底层如何工作的欣赏，兴趣和理解。
  - 把人和机器的工作区分开 :: 找出可重复的编码任务。
  - 从核心生成代码 ::
    1. 定义输入源。选择合适的编程语言。为输入源提供者配上模板。
    2. 自动化时避免手动调整生成的代码。
    3. 生成的代码和真正的代码一样整洁。
  - 何时自主开发
    1. 深刻理解问题空间
    2. 发现核心问题并改进
    3. 程序员的傲骨
       1. 开发自己的工具集来完成工作是工作对我们劳动的最高奖赏。
       2. 这些工具决定职业生涯
       3. 揭示决意改进的东西，决定立场
  - 发行不过是第一版

* 动力何在？
  - 工作就是福利 :: 能够让我们长期保持干劲的东西就是工作本身。而非福利。
  - 从喜欢处入手 :: 先从喜欢处入手，然后在根据时间迫使自己完成这个项目。
  - 莫求全 :: 一个伟大的程序员会痴迷到有强迫症，但也一直能接受不完美。
  - 休止一下 :: 当代码开始变得有点拖沓的时候。
  - 早起先测试。
  - 别再卧室工作 :: 区分工作和生活。
  - 第一印象 :: 第一印象不好可能是不熟悉。也可能是关注了次要东西。
                问题如果长期存在，才能说明产品确实有瑕疵。
  - 软件发行才有生命
  - 找个争论话题，促进交流。

* 生产力经验谈
  * 对消闲项目说不 ::
    1. 当你决定认真对待他的时候，就需要定下一个期限。
    2. 最后期限创造了一种紧迫感。
    3. 一旦养成今天放一放，明天再补上的习惯，很快就会对
    4. 他失去兴趣。
    5. 时间是保持编程动力最重要的因素。
    6. 限制所有的因素。越是要开发伟大的软件。
  * 去掉时间表的细节::交付太频繁，没有重新考虑的余地。
  * 每天改进产品的两个方面。X2O原则。
  * 为良好的工作环境投资。
    速度快功能多的机器会物有所值::->这就是为什么我决定要换用iphone
  * 加大地产投资::多花上几千美元可不是一笔开销，而是对生产力的投资。
    屏幕，桌面，etc。
  * 列一张个人待办事项清单 :: 只是一张检查单。->我使用的是Any DO:TODO.
    - 在线 :: 不管在哪里都能看到
    - 容易修改 :: 很容易的把事项挪上挪下
    - 三个栏目 :: 今天，明天和未来（原书还有后天，我觉着有点赘余）
    - 短任务 :: 几个小时内就可以做完
    - 无嵌套，无依赖 ::
  * 每天评估重要事项 :: 避免不重要的事情和完成重要的事情一样重要。
  * 和团队一起安排免打扰时间
    开放的时间表至关重要，保证打扰别人是最后选择。
  * 程序员最好的工作环境是人员流动率很低的自治小团队。
  * 避谈我们 :: 1. 带来噪声。2. 旁观者效应（根本不知你在干啥）。

* 复杂性
  首先复杂性永远会随着时间推移而增长。
  * 避免毫无必要的复杂性 :: 以恰好满足的需求为准
  * 简单的产品不好做 :: 所有的逻辑漏洞都在深入的细节上，这是细节的本质。
  * 复杂性就像[[http://baike.baidu.com/view/2366880.htm][挑棍游戏]]。
  * 把复杂性藏起来
  * 难编可能意味着难用
  * 把握重构时机 :: 开发周期中过早的过度架构就会留下一个没填满的坑，而
                    架构不足，就会让我们丧失继续改进软件的选择和动力。
  * 确定节奏 :: 跟换档一样，要不换得太早，要不换得太晚。

* 如何教学
  * 知识魔咒 :: 比如给盲人指点颜色。要先了解新手的思维
  * 用浅显的例子 :: 去掉泛泛之谈，通用名称和理论
  * 简化概念 :: 即使是无妨大雅的错误概念
  * 鼓励自主思维 :: 学习模型所推荐的
  * 谨慎使用比喻 ::

* 对付客户
  * 软件黑魔法 :: 有时需要告诉客户我们是如何完成工作的。
  * 设定目标 :: 然后才可以避免临时的改变。
  * 激发热情 :: 更吸引人
  * 宽容大肚 :: 养成谈话的习惯
  * 价值不只是工时 :: 1. 灵活性，2.教育，3. 专业知识，4. 进度和准时。
  * 按产品收费 :: 不去依靠时间去收费。

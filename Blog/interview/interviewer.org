# -*- mode: org -*-
# Last modified: <2013-05-18 12:31:27 Saturday by richard>
#+STARTUP: showall
#+LaTeX_CLASS: chinese-export
#+TODO: TODO(t) UNDERGOING(u) | DONE(d) CANCELED(c)
#+TITLE: A perfect interview
#+AUTHOR: Richard Wong


* 从面试官说起
  The way you think through a design matters most. Explain what you are
  thinking as you work. You may get some steering if you are headed the
  wrong way. Otherwise, they'll know that your choices came from the
  consideration of trade-offs rather than luck or some cheatsheet of
  interview problems.
  
  Coding is a team sport so how you communicate your thoughts is
  almost as important as the thoughts themselves. Make quick class
  diagrams, pseudo-code, block diagrams, etc. to make sure they
  understand what you mean. Use clear language and engage.

  Remember, part of the "test" is how well you solicit
  requirements. Understand the problem AND the rubric for how the
  interviewer will evaluate your answer. Ask clarifying questions and
  keep asking until you: (1) have found the boundaries of what really
  matters for the problem.  (2) Have a pretty good idea of the
  interviewer's priorities. If he favors evolvability over simplicity,
  then he might want you to use a design pattern that facilitates
  later changes even at the expense of simplicity now. You'll know
  this because he'll tell you that the problem is going to evolve. Pay
  attention to those hints. If he want you to write tests first, he'll
  say things like, "How would you normally go about coding this?" If
  you are not sure, ask, "Is evolvability a concern?" or "Should I
  write tests?"

  Make good identifier choices and improve them as you learn more or
  the problem evolves. My favorite interview coding problems require
  you to evolve a simple card game over several changes/additions to
  the rules. At first, you may call one object a "player" but then
  when the player can have more than one hand, you split it out and
  call it a "hand". Those choices are key to writing maintainable
  code. I want to see you do that in interviews.

  My undergrad was Electrical Engineering and my first two programmer
  hires were also EEs. My third programmer was a CS grad and he did so
  poorly at work that I never hired another CS grad as a programmer
  until about my 50th hire. I've also taught Software Engineering
  classes at Carnegie Mellon to CS students (as opposed to SE
  students) so I have my suspicions about what might be your
  particular issue. The advice I'm about to give may not matter as
  much for algorithm-oriented jobs but will apply for most business
  applications.
  
  The difference between science and engineering is that an engineer
  treats every decision as an evaluation of trade-offs. CS students
  are taught about elegant abstractions, data structures, and
  algorithms. Engineers learn those also but never forget to trade
  them off against practical considerations of functionality,
  usability, risk and most importantly COST. So:

  Know the most common design patterns [1] and how to apply them. Pay
  particular attention to the design patterns that use inversion of
  control and/or target the "intent" of evolvability including
  Strategy, Template Method, Observer, Factory, and Iterator. These
  help mitigate the risk of having an imperfect understanding of the
  actual (as opposed to documented) requirements and against
  inevitable changes. They also facilitate communication and the
  application of a known pattern costs less than a root principles
  approach... especially when targeting the 'ilities. Know the buzz
  words to trigger when the interviewer is looking for you to use a
  particular pattern. If he says, "How would you code the general
  algorithm while allowing for different details?" you should know
  that he wants you to use Template Method.

  The "correct" answer may be to use a library or 3rd-party
  framework. I intentionally seed my interviews with "trick" questions
  that are best answered with, "Use Lucene Solr." or "I expect that
  there is a library function for proper URL encoding." The buy versus
  build trade-off decision is often the most important.

  Know the SOLID [2] principles, how to apply them... and when their
  application is going overboard particularly the Liskov substitution
  principle.

  Stay away from functional programming. Most Java runtimes do not
  properly flatten tail recursion. Run away memory usage is a big
  worry in production systems and they don't teach you that in
  school. If you use recursion where a simple bounded loop would
  suffice, I will know that you have not learned to worry about these
  risks and (at least for me) the interview is over.

  Know the tools for source code management, automated testing, and
  continuous integration and why they are important.
  
* exaggerate quotes here.
  
** When interviewer talks:
   -- "We are like a startup inside of a big company."  
   When you hear this, run!
   It is almost never true. It typically just means that the group is
   successfully staying under the radar or is such a rounding error or
   so non-strategic that no one notices they are there.
   What almost always is true is:
   - We are like a startup, *except* no upside for you if we succeed.
   - We are like a startup, *except* the downside is worse for you if we
     fail: you suffer a humiliating round of interviews with other
     groups and finally get laid off.
   - We are like a startup, *except* we cannot raise capital on the open
     market: we have one funder who can pull the plug at any point.
   - We are like a startup, *except* even if we show traction, our
     project will get cancelled at the next budget cycle.
   - We are like a startup, *except* we spend all of our time battling
     the big bad company we are stuck inside of.
   - We are like a startup, *except* we don't have a sales and marketing
     budget, and corporate S&M won't return our calls.
   - We are like a startup, *except* no one who truly values working at a
     startup would work under these circumstances.
     
     They especially like to try this on new college grads, especially
     ones who want a startup experience while still being able to tell
     Mom and Dad they can tell their friends their kid works at well
     known company X.
     
* We are a start-up still trying to find our feet.
  Read: 
  We've been going for a number  of years but we haven't managed to
  move beyond start-up stage because  we really haven't a clue how to
  essentially run a business. So our  administration and payroll are a
  mess, we're unable to issue you with  proper wage slips, and we
  waste a lot of money on fines for failing to  file our taxes and
  other company paperwork on time. But none of that  will affect you,
  of course.
  Trust me, it will affect you. Badly.
  
* "Most of our employees have been with us for years."
  That usually means 2 years.  And it is usually follow by "We must be
  doing something right."  That usually means they do very little
  right.   RUN!
  

# -*- mode: org -*-
# Last modified: <2013-01-09 10:35:25 Wednesday by richard>
#+STARTUP: showall
#+LaTeX_CLASS: chinese-export
#+TODO: TODO(t) UNDERGOING(u) | DONE(d) CANCELED(c)
#+TITLE:   The Art Of Readable Code
#+AUTHOR: Richard Wong

* 代码应当易于理解
  使他人理解的时间最小化.
** 把信息装在名字里:
*** 使用专业的单词.
    需要更加清晰和准确的词.
**** TODO 寻找更多的词
     | word  | more suitable word                                 |
     |-------+----------------------------------------------------|
     | send  | deliver, dispatch, announce, distribute, route     |
     | find  | search, extract, locate, recover                   |
     | start | launch, create, begin, open                        |
     | make  | create, set up, build, generate, compose, add, new |
**** tips
     形如eval和tmp应只用于短期存在且临时性为主要因素的变量.
**** 小心多义
     比如filter, length和limit.
**** 避免使用反义的词
     比如disable*, isnot*

*** 用具体代替抽象.
*** 为名字附带更多信息.
*** 带单位的值以及其他的重要属性.
    英语表示法, 而非匈牙利表示法.
*** 名字长度
    1. 在小的作用域里=可以=使用短的名字.
    2. 首字母缩写. (原则:读者是否理解这个名字的含义)
    3. 丢掉没用的词.
*** 有目的的使用大小写, 下划线等.
*** 与使用者的期望相匹配
    1. 如get*(), size()
       算是轻量级访问器. 复杂度应该小于O(lgn).一般都应为O(1)
*** 推荐命名:
    1. 命名极限最清楚的方式是在要限制的东西前加上max_或者min_.
    2. 用first和last来表示包含的范围.[first, last]
    3. 用begin和end表示包含和排除的范围.[begin, end)
    4. 给boolean变量加上is, has, can, should这样的词, 使之更明确.

** 审美原则
   1. 使用一致的布局，让读者*很快*适应这种风格。
      一致的风格比"正确"的风格更重要.
   2. 让相似的代码看上去相似。
   3. 把相关的代码行分组，形成代码块。

*** 技巧
    1. 重新安排换行来保持一致和紧凑;
    2. 用方法来整理不规则的东西;
    3. 在需要的时候使用列对齐;
    4. 选一个有意义的顺序, 始终一致的使用它;
    5. 将声明按块组织起来;

** 注释
   注释的目的是帮助别人和你知道的一样多.
*** 注释的原则
   1. 不要为那些从代码本身就能快速推断的事实写注释;
   2. 不要为了注释而注释;
   3. 不要粉饰烂代码, 把名字改好;
   4. 加入导演评论;
   5. 为代码的瑕疵写注释;
      如: TODO: FIXME: HACK: XXX:之类的关键字. 一般IDE都会有很好的支持.
   6. 给常量加注释.
*** 站在读者的角度去考虑
    1. 公布可能的陷阱.
    2. 全局观的注释, 如何一起工作.
    3. 总结性的注释, 避免迷失在细节中.

*** 注释技巧
    1. 注释应该有很高的信息/空间率.
    2. 避免不明确的代词.
    3. 润色粗糙的句子.
    4. 精确的描述函数的行为.
    5. 如果有特别的情况, 精心挑选输入输出来说明
    6. 声明代码高层次的意图.
    7. 嵌入注释, 具名函数参数的注释.
       #+begin_src c++
        Connect(/* timeout_ms */ 10, /* user_encryption = */ false);
       #+end_src
    8. 采用信息量高的词.

* 简化循环和逻辑
** 控制流
   把条件, 循环以及其他对控制流的改变做的越"自然"越好. 运用一种方式使
   读者不用停下来重读你的代码.

*** if/else
    1. 首先处理正逻辑, 而不是负逻辑;
    2. 先处理最简单的情况.(使得之后的if else全屏之内可见)
    3. 先处理有趣的或者可疑的情况.

*** skills
    1. 默认情况下都用if/else, 三项运算符只在最简单的情况下使用.
    2. 比较的左侧更倾向于不断变化的值, 右侧更倾向于常量.(英语表示法)
    3. 避免do...while循环.
    4. 处理异常, 从函数中提前返回.
    5. 最小化嵌套.
       1) 通过提早返回来减少嵌套.
       2) 减少循环内的嵌套.

** 拆分超长的表达式
   大多数人只能够同时考虑3-4件事情.

*** skills
   1. 用做解释的变量
   2. 使用总结性变量
   3. 利用德摩根定律. 
      not (a or b or c) <=> (not a) and (not b) and (not c)

** 变量的可读性
   1. 变量越多, 越难全部跟踪他们的动向.
   2. 变量的作用域越大, 就需要跟踪它的动向越久.
   3. 变量改变的越频繁, 就越难以跟踪他的当前值.

*** Skills
    1. 减少变量
       a. 没有价值的临时变量.
       b. 减少控制流变量.
    2. 让你的变量对尽量少的代码行可见.
    3. 将定义往下移.
    4. 只写一次的变量最好.
       操作一个变量的地方越多, 越难确定它的当前值.

* 重新组织代码
  积极地发现并抽取不相关的子逻辑. 重新组织代码, 使它一次只做一件事情.
** tips
   1. 先用自然语言描述代码, 然后用这个描述来帮助你找到更简洁的解决方案.
   2. 纯工具代码. (完全的从项目的其他部分中解耦出来.)
   3. 创建大量的通用代码.
   4. 简化已有接口.
      永远不要安于使用不理想的接口.
   5. 按需重塑接口.
   6. 过犹不及.
   
** 一次只做一件事情.

** 想法 -> 代码.
   1. 清楚的描述逻辑.
   2. 了解函数库.
   3. 递归的使用这种方法.

** 少些代码.
   1. 最好读的代码就是没有代码.
   2. 不要费神实现那个功能.
   3. 质疑拆分你的需求, 解决版本最简单的问题, 只要能完成工作就行.
   4. 保持小代码库. 越小, 越轻量级越好.
   5. 删除没用的代码.
   6. 每隔一段时间, 就要花1-2个番茄钟来阅读标准库中的所有函数/模块/类
      型的名字.
      
* 其他
** 使测试便于阅读和维护.
   1. 测试应当具有可读性, 以便其他程序员可以舒服的改变或者增加测试.
   2. 对使用者隐去不重要的细节, 以便更重要的细节会更突出.
   3. 创建最小的测试声明.
      大多数的基本测试, 都应该精简成, 对于这样的输入, 应该有这样的输出.
   4. 让错误消息具有可读性. 如同注释那样.
   5. 更多利用更合适的assert()
      如 assertIn()...
   6. 选择好的测试输入.
      应当选择一组最简单的输入, 他能完整的使用被测代码.
   7. 使用编程来进行大型的破坏性输入.
   8. 一个功能使用多个小测试.
   9. 为测试函数命名.
   10. 不要过度测试.

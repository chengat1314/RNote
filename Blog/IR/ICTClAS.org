# -*- mode: org -*-
# Last modified: <2012-04-23 17:15:45 Monday by richard>
#+STARTUP: showall
#+TITLE:   ICTClAS


* Intro

  基本思路:先进行原子切分,然后在此基础上进行N-最短路径粗切分,找出前N个最符合的切分结果,生成二元分词表,然后生成分词结果,接着进行词性标注并完成主要分词步骤.

* Analysis CDynamicArray
** ARRAY_CHAIN
*** basic element is ARRAY_CHAIN,
    Contains:
     * row and col number.
     * value(double)
     * POS value.
     * Word Length.
     * Word string.(GB2312 format)
     * A pointer which point to next element.(ARRAY_CHAIN)

    #+begin_src c++ :tangle yes
#define ELEMENT_TYPE double//the type of element

//#define ROW_FIRST 0//Row first in the array store

struct tagArrayChain{
    unsigned int col,row;//row and column
    ELEMENT_TYPE value;//The value of the array
    int nPOS;
    int nWordLen;
    char *sWord;
    //The possible POS of the word related to the segmentation graph
    struct tagArrayChain *next;
};
typedef struct tagArrayChain ARRAY_CHAIN,*PARRAY_CHAIN;

    #+end_src

*** 这个动态数组主要分为RowFirst和ColomnFirst两种状态，通过一个
    m_bRowFirst来控制。True则为rowFirst, false otherwise.
    SetRowFirst
**** Property functions:
     * GetTail
     * GetHead
     * GetElement/SetElement (from row and colomn number, ret value, and Pos, ret
       word.)
**** Normal Function:
    * SetEmpty
    * assignment function.

     #+begin_src c++ :tangle yes
class CDynamicArray
{
  public:
    bool SetRowFirst(bool RowFirst=true);
    unsigned int GetTail(PARRAY_CHAIN *pTailRet);
    //Get the tail Element buffer and return the count of elements
    PARRAY_CHAIN GetHead();
    //Get the head Element
    bool GetElement(int nRow, int nCol,ELEMENT_TYPE  *pRetValue,int *pRetPOS=0,char *sRetWord=0);
    void SetEmpty();
    CDynamicArray(bool bRowFirst=false);
    virtual ~CDynamicArray();
    const CDynamicArray & operator =(const CDynamicArray &);
    bool operator ==(const CDynamicArray &array);

    ELEMENT_TYPE GetElement( int nRow, int nCol,PARRAY_CHAIN pStart=0,PARRAY_CHAIN *pRet=0);
    int SetElement(unsigned int nRow, unsigned int nCol, ELEMENT_TYPE fValue,int nPOS,char *sWord=0);
    unsigned int m_nCol,m_nRow;//The row and col of the array
    bool m_bRowFirst;
  private:
    PARRAY_CHAIN m_pHead;//The head pointer of array chain
};

     #+end_src

*** Structure
    |---------------+---+---+---+---|
    | pCur(m_pHead) |   |   |   |   |pPre = NULL
    |---------------+---+---+---+---|

** Queue
*** tagQueueElem
    #+begin_src c++ :tangle yes
struct tagQueueElem{
    unsigned int nParent;//the weight
    unsigned int nIndex;//number of index in the parent node
    ELEMENT_TYPE eWeight;//the weight of last path
    struct tagQueueElem *next;
};
    #+end_src


** CNShortPath

   #+begin_src c++ :tangle yes
class CNShortPath
{
  public:
    int m_nResultCount;
    int Output(int **nResult,bool bBest,int *npCount);
    int ShortPath();
    CNShortPath(CDynamicArray *aCost,unsigned int nValueKind=1);
    virtual ~CNShortPath();
  private:
    void GetPaths(unsigned int nNode,
                  unsigned int nIndex,int **nResult=0,bool bBest=false);
    CDynamicArray *m_apCost;
    unsigned int m_nValueKind;//The number of value kinds
    unsigned int m_nVertex;//The number of vertex in the graph
    CQueue   **m_pParent;//The 2-dimension array for the nodes
    ELEMENT_TYPE **m_pWeight;//The weight of node
};
   #+end_src


* dict data-structure
  ICTCLAS的词典结构是理解分词的重要依据，通过这么一个数据结构设计合理访问速度高效的词典才能达到快速准备的分词的目的。

* 原子分词

  ICTCLAS分词的第一步就是原子分词。但在进行原子切分之前，首先要进行断句处理。所谓断句，就是根据分隔符、回车换行符等语句的分隔标志，把源字符串分隔成多个稍微简单一点的短句，再进行分词处理，最后再把各个分词结果合起来，形成最终的分词结果。

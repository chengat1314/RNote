# -*- mode: org -*-
# Last modified: <2012-05-17 15:16:26 Thursday by richard>
#+STARTUP: showall
#+TITLE:   microblog

* 问题：
1. 关于微薄权重的选择：
   微薄长度在140字以内。
   但是微薄长短导致的关键字提取权重必然不同。但是区分度并不是那么明显。
   再者，由于微薄由于数量众多，所以关键字的容量将会非常大。
2. 图片式的长文章是否抓取，如果抓取，势必算法应该不同。而且算法复杂度应该大为提高才是。因为设计到OCR等内容。
3. 情感分析的话，表情应该更能表达。所以在停用词选用上面就需要更加注意。
4. 火星文。或者错误字如何处理。比如在linux中，我就经常将微博写成微薄。可能因为输入法或者语言习惯等问题导致的惯用输入。
5. 分词算法我觉着全部自己控制才能靠谱，或者有个专门的测试，可能是用
   linux久了的一个习惯，比如在分词时候可能会出现这种问题： 啊啊啊啊啊
   啊啊啊啊，呵呵呵呵呵呵呵呵呵呵呵呵。当然这个在英文中也会遇到，比如：
   hiiiiiiiigh, laughhhhhhhh之类的。
6.

* 分类

** 分类1

   1. 大众微博
      一般指发布生活、健康、时尚、潮流、新闻等方面信息的微媒，及人人都可以有兴趣的微博。
   2. 分众微博
      分众微博一般指发布科技、知识、音乐、影视、以及各类商品信息的微博。

** 搜狗训练方案：
   C000007	汽车
   C000008	财经
   C000010	IT
   C000013	健康
   C000014	体育
   C000016	旅游
   C000020	教育
   C000022	招聘
   C000023	文化
   C000024	军事






* 已经讨论过的问题。
1. 停用关键词也是非常重要的一部分。
2. 新内容//旧内容（被转发内容） 是否需要分别对待，如何对待。
   贺贺的方法是直接丢弃旧内容，我认为应该分开，然后加上不同的权重算法。事实上，转发前的内容信息更重要。一般我看微博都是转发前内容为主的更多。
3. 对于@必须有特殊的处理方式，否则人名不就被seg了。
   直接丢弃人名。。。我觉着这是浪费了一个关系链。。@的人不一定就是胡粉关系。可以随便@的。
4.

* 描述清楚文档以及具体程序是做什么

* 文档：
1. 首先进行对评论进行处理，然后进行df库的计算。（得出df库）//下次加载的速度会显著提升，大概会使用1%的时间。
2. 对特定文章进行处理。计算出tf词表。
3. 对各类tf和df运算进行分析。
   |---------------------+-------------------------+----------------|
   | tf(Term frequency): | df(Document frequency): | Normalization  |
   |---------------------+-------------------------+----------------|
   | tf-idf              | nodf                    | none           |
   | logarithm           | idf                     | cosine         |
   | augmented           | prob idf      *         | pivoted unique |
   | boolean             |                         | byte size      |
   | log ave             |                         |                |
   |---------------------+-------------------------+----------------|
4. 分析结果图使用pie chart来表示，分析结果如下：
5. 添加了停用词测试。
6. 添加了ICTCLAS分词系统。（*）
7. 添加了线上的分词系统。
8. 对比了分词系统优劣。总结如下表：

** 关于ICTCLAS
   1. 精简成为一个网络socket服务。通过网络传递来进行分词处理。（学自贺贺）
   2. 词库版本较差，根据词性来更新词库是个问题。
   3. 所有字节同一使用UTF-8格式。
   4. 权重系统内部使用Unicode，这样原因是为了方便二次处理。内外接口不匹配可以采用适配器模式来处理。

* 总结
1. 微薄在权重关键字的时候，由于篇幅小，所以关键字数量对于关键字权重的
   影响非常小。所以采用更为平滑的曲线更为合适。 甚至是1 or 0模式。
2. 所实现的归一化过程在本文档比较的时候，是没有效果的，除非pivot
   unique，并且m取值到不应取的范围内：如<0

* Next Step
** 微薄的数理规律和影响
   1. 转发平均长度，中位数。
   2. 各类信息长度特点。
   3. 分布曲线。
   4. etc。。。

# -*- mode: org -*-
# Last modified: <2013-06-07 14:46:06 Friday by wongrichard>
#+STARTUP: showall
#+LaTeX_CLASS: chinese-export
#+TODO: TODO(t) UNDERGOING(u) | DONE(d) CANCELED(c)
#+TITLE:   Bad Smell
#+AUTHOR: Richard Wong

* Don't trust me.

* This seems like a Primer level.
  This presentation just to move you from newbie group to advanced
  beginer. That's the goal.
  But it is all about arts of engineering process.
  
* Why bad things happens.
** More and more features
   It leads to increased complexity.
   
** Shortcuts and hacks
   to support “We need this fancy search till August. Period!” features
   
** Developers rotation/team growth
   New developers don’t know all the fundamental decisions and ideas
   behind the architecture. Knowledge gets lost with transition inevitably.
   More people - less communication. Less communication - bad decisions.
   
   Teams should understand that rewriting is riskier proposition as
   compared to refactoring and hence should use the terminology
   accordingly.
   
* Concept related
  1. Bad Smell
  2. Refactoring
  3. Rewrite.
     
* Bad Smell
** What is bad smell?
   In computer programming, code smell is any symptom in the source
   code of a program that possibly indicates a deeper problem.
   Code smells are usually not bugs—they are not technically incorrect
   and don't currently prevent the program from functioning. Instead,
   they indicate weaknesses in design that may be slowing down
   development or increasing the risk of bugs or failures in the future.
   
** Bad smell types.
    
*** Comments
    There's a fine line between comments that illuminate
    and comments that obscure. Are the comments necessary? Do they
    explain "why" and not "what"? Can you refactor the code so the
    comments aren't required? And remember, you're writing comments
    for people, not machines.

*** Excessively long identifiers
    In particular, the use of naming conventions to provide
    disambiguation that should be implicit in the software
    architecture.
    
    this is pep8 or some common rules. Best practice related.
    
*** Excessively short identifiers
    The name of a variable should reflect its function unless the function is obvious.

*** Excessive use of literals
    These should be coded as named constants, to improve readability
    and to avoid programming errors. Additionally, literals can and
    should be externalized into resource files/scripts where possible,
    to facilitate localization of software if it is intended to be
    deployed in different regions.
    
*** Uncommunicative Name
    Does the name of the method succinctly describe what that method
    does? Could you read the method's name to another developer and
    have them explain to you what it does? If not, rename it or
    rewrite it.

*** Inconsistent Names
    Pick a set of standard terminology and stick to it throughout your
    methods.
    For example, if you have Open(), you should probably have
    Close().

*** Type Embedded in Name(I don't agree with here.)
    Avoid placing types in method names; it's not only redundant, but
    it forces you to change the name if the type changes.
    Chat Here.

*** Temporary Field
    Watch out for objects that contain a lot of optional or
    unnecessary fields. If you're passing an object as a parameter to
    a method, make sure that you're using all of it and not
    cherry-picking single fields.

*** Outer do things outer.
    Don't check it twice.

*** Dead Code
    Ruthlessly delete code that isn't being used. That's why we have
    source control systems!

*** Duplicated code (DIY)
    identical or very similar code exists in more than one location.
    Duplicated code is the bane of software development. Stamp out
    duplication whenever possible. You should always be on the lookout
    for more subtle cases of near-duplication, too. Don't Repeat
    Yourself!

*** Indent level
    Never ever great than 6?

*** Long method
    All other things being equal, a shorter method is easier to read,
    easier to understand, and easier to troubleshoot. Refactor long
    methods into smaller methods if you can.
    the long threshold? my own is 20 line of code.
    That is the basic of readable code and small abstraction.
    
*** Message Chains
    Watch out for long sequences of method calls or temporary
    variables to get routine data. Intermediaries are dependencies in
    disguise. 

*** Big Conditional Chain (Conditional Complexity)
    Watch out for large conditional logic blocks, particularly blocks
    that tend to grow larger or change significantly over
    time. Consider alternative object-oriented approaches such as
    decorator, strategy, or state.

*** Too many parameters
    The more parameters a method has, the more complex it is. Limit
    the number of parameters you need in a given method, or use an
    object to combine the parameters.
    Never more than 6.
    less than 5 always a good choice.

*** Large class
    A class that has grown too large. 
    Large classes, like long methods, are difficult to read,
    understand, and troubleshoot. Does the class contain too many
    responsibilities? Can the large class be restructured or broken
    into smaller classes?

*** The God Class
    A class is a god object when it knows too much or does too much.
    The main function/method may know about the existence of the
    windows, databases, and other objects. It may perform over-arching
    tasks like introduce the model to the controller.
    But that doesn't mean it manages all the little details. It
    probably doesn't know anything about how the database or windows
    are implemented.
    If it did, it could be accused of being a God object.

*** Feature envy
    A class that uses methods of another class excessively.
    Methods that make extensive use of another class may belong in
    another class. Consider moving this method to the class it is so
    envious of.

*** Lazy class / Freeloader
    Class that does too little.

*** Enjoy Function.(No more abstract)
    for oneline class 

*** Inappropriate intimacy
    A class that has dependencies on implementation details of another
    class.

*** Ubercallback
    A callback that is trying to do everything.

*** Refused bequest
    A class that overrides a method of a base class in such a way that
    the contract of the base class is not honored by the derived
    class. See Liskov substitution principle.
    If you inherit from a class, but never use any of the inherited
    functionality, should you really be using inheritance?

*** Complex conditionals
    Branches that check lots of unrelated conditions and edge cases
    that don't seem to capture the meaning of a block of code. 

*** Combinitorial Explosion
    You have lots of code that does almost the same thing.. but with
    tiny variations in data or behavior. This can be difficult to
    refactor-- perhaps using generics or an interpreter?

*** Speculative Generality(Do more steps)
    Write code to solve today's problems, and worry about tomorrow's
    problems when they actually materialize. Everyone loses in the
    "what if.." school of design. You (Probably) Aren't Gonna Need It.

*** Oddball Solution
    There should only be one way of solving the same problem in your
    code. If you find an oddball solution, it could be a case of
    poorly duplicated code-- or it could be an argument for the
    adapter model, if you really need multiple solutions to the same
    problem.

*** Alternative Classes with Different Interfaces
    If two classes are similar on the inside, but different on the
    outside, perhaps they can be modified to share a common interface.

*** Primitive Obsession
    Don't use a gaggle of primitive data type variables as a poor
    man's substitute for a class. If your data type is sufficiently
    complex, write a class to represent it.  

*** Data Class
    Avoid classes that passively store data. Classes should contain
    data and methods to operate on that data, too.

    together, maybe it belongs together. Consider rolling the related
    data up into a larger class.
    
*** Data Clumps
    If you always see the same data hanging around

*** Inappropriate Intimacy
    Watch out for classes that spend too much time together, or
    classes that interface in inappropriate ways. Classes should know
    as little as possible about each other.

*** Indecent Exposure
    Beware of classes that unnecessarily expose their
    internals. Aggressively refactor classes to minimize their public
    surface. You should have a compelling reason for every item you
    make public. If you don't, hide it.

** Advanced Skills

*** contrived complexity
    Forced usage of overly complicated design patterns where simpler
    design would suffice.

*** Middle Man
    If a class is delegating all its work, why does it exist? Cut out
    the middleman. Beware classes that are merely wrappers over other
    classes or existing functionality in the framework.

*** Divergent Change
    If, over time, you make changes to a class that touch completely
    different parts of the class, it may contain too much unrelated
    functionality. Consider isolating the parts that changed in
    another class.

*** Shotgun Surgery
    If a change in one class requires cascading changes in several
    related classes, consider refactoring so that the changes are
    limited to a single class.

*** Parallel Inheritance Hierarchies
    Every time you make a subclass of one class, you must also make a
    subclass of another. Consider folding the hierarchy into a single
    class.

*** Incomplete Library Class
    We need a method that's missing from the library, but we're
    unwilling or unable to change the library to include the
    method. The method ends up tacked on to some other class. If you
    can't modify the library, consider isolating the method.

*** Solution Sprawl
    If it takes five classes to do anything useful, you might have
    solution sprawl. Consider simplifying and consolidating your
    design.

** When bad smell happens...
   Refactoring or rewrite?

* Refactoring
** Refactoring?
   Refactoring consists of improving the internal structure of an
   existing program’s source code, while preserving its external
   behavior.
   
   The noun "refactoring" refers to one particular
   behaviour-preserving transformation, such as "Extract Method" or
   "Introduce Parameter".
   
** Refactoring does not mean
   rewriting code
   fixing bugs
   improve observable aspects of software such as its interface
   
   Refactoring in the absence of safeguards against introducing
   defects.
   
** Refactor or Rewrite?
   Refactor when the code is difficult to understand and the team is not
   sure of what it does.(much safer)
   Rewrite when it is clear what the code does but it is difficult to
   understand. it time to rescue the code by rewriting it from
   scratch. This can be applied at various levels (whole code base,
   single module, class or method).  

** Expected benefits
   1. refactoring improves objective attributes of code (length,
      duplication, coupling and cohesion, cyclomatic complexity) that
      correlate with ease of maintenance.
   2. refactoring helps code understanding
   3. refactoring encourages each developer to think about and
      understand design decisions, in particular in the context of
      collective code ownership
   4. refactoring favors the emergence of reusable design elements
      (such as design patterns) and code modules
   
** Signs of use
*** Git commit log
    version control records (such as CVS or git logs) include entries
    labeled "Refactoring"
*** the code modifications corresponding to such entries can be verified to be behaviour-neutral
    for example:no new unit tests or functional tests are introduced

* Appendix:Ways to check code
  Currently, there are three solutions to check sanity of Python code:
  
** Pylint
   Mainly checks for code smell
** Pychecker
   More advanced checking than Pylint, it evaluates code thought and does not support recursive checks. It's also slow.
** Pyflakes
   Checks for errors without evaluating code (by using compiler package). Pretty limited checks thought.
   
* Programmers Refactoring Level

** Beginner Level
   knows the definition of "refactoring"
   
   can use some automated refactorings from the IDE
   
   can perform some refactorings by hand
   
   is aware of the risks of regression from manual and automated refactorings
   
   is aware of code duplication and can remove it by refactoring
   
** Intermediate Level
   knows and is able to remedy a broader range of "code smells"
   
   can chain several refactorings to carry out a design intention, in awareness of the dependencies between refactorings
   
   refactors continuously, rather than in sporadic and lengthy sessions
   
** Advanced
   has an acute sense of code duplication and coupling
   
   applies refactorings to non-code elements such as database schema,
   documents, etc.
   
   uses refactoring to guide large bodies of code toward design styles
   intentionally chosen from a broad palette: object-oriented,
   functional, or inspired by known design patterns.

* references:
  1. Refactoring: Improving the Design of Existing Code by Martin
     Fowler and Refactoring to Patterns by Joshua Kerievsky.
  2. Wikipedia.
  3. Quantities Practice.
(require 'org-tree)

